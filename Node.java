public class Node implements Comparable<Node> { 
        
        public Driver obj; // generic variable to hold driver objects 
        public Node next;
        public Node prev;
        
        // Default constructor: set next and prev pointers to null
        public Node() {
            this.obj = null;
            this.next = null;
            this.prev = null;
        }
        
        // Overloaded constructor: passes driver object into generic variable
        public Node(Driver obj) {
            this.obj = obj;
            this.next = null;
            this.prev = null;
        }
        
        // Accessor for generic object
        public Driver getObj() {
            return obj;
        }
        
        // Mutator for generic object
        public void setObj(Driver obj) {
            this.obj = obj;
        }
        
        // Accesor for next pointer 
        public Node getNext() {
            return next;
        }
        
        // Mutator for next pointer 
        public void setNext(Node next) {
            this.next = next;
        }
        
        // Accessor for prev pointer 
        public Node getPrev() {
            return prev;
        }
        
        // Mutator for prev pointer 
        public void setPrev(Node prev) {
            this.prev = prev;
        }
        
        
        @Override
        public int compareTo(Node obj) {
           return this.obj.compareTo(obj.getObj());
        }
        
        // Returns string generated by driver's toString() method
        @Override
        public String toString() {
            String str = obj.toString(); 
            return str;
        }
        
        
    }